/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/e0efecc1-b220-4304-80cd-a4909d752b2f

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humity;
  int raining;
  int soilMoisture;
  int temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include "DHT.h"

#define DHTPIN 4
#define umidadeDoSoloPin 34
#define sensorChuvaPin 5

#define DHTTYPE DHT11 // DHT 11
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  
    // Initialize serial and wait for port to open:
    Serial.begin(115200);
    // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
    delay(1500);

    // Defined in thingProperties.h
    initProperties();

    // Connect to Arduino IoT Cloud
    ArduinoCloud.begin(ArduinoIoTPreferredConnection);

    /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
    setDebugMessageLevel(2);
    ArduinoCloud.printDebugInfo();

    pinMode(umidadeDoSoloPin, INPUT);
    dht.begin();
}

void loop() {
    ArduinoCloud.update();

    humity = getSensorHumityData();
    temperature = getSensorTemperatureData();

    raining = isRaining();
    soilMoisture = getSensorSoilMoistureData();

    Serial.print(F("soilMoisture : "));
    Serial.println(soilMoisture);
    Serial.print(F("humity : "));
    Serial.println(humity);
    Serial.print(F("temperature : "));
    Serial.println(temperature);
    Serial.print(F("raining : "));
    Serial.println(raining);
    
    delay(6000);
}

float getSensorHumityData() {

    float h = dht.readHumidity();
    if (isnan(h)) {
        //Serial.println(F("Failed to read from DHT sensor!"));
        return -1.00;
    }

    return h;
}

float getSensorTemperatureData() {

    float t = dht.readTemperature();
    if (isnan(t)) {
        //Serial.println(F("Failed to read from DHT sensor!"));
        return -1.00;
    }

    return t;
}

int getSensorSoilMoistureData() {

    int soilMoistureValue = analogRead(umidadeDoSoloPin);
        
    if (isnan(soilMoistureValue)) {
        return 0;
    }
    return soilMoistureValue;
}

bool isRaining() {
 int sensorChuvaValue = analogRead(sensorChuvaPin);

    if (isnan(sensorChuvaValue)) {
        return false;
    }

    // o valor de comparaÃ§Ã£o varia dependendo do vcc (3v ou 5v) e resistor utilizado ( 10k ohms utilizado)
    if (sensorChuvaValue > 2000) {
        return true;
    }
  
    return false;
}
